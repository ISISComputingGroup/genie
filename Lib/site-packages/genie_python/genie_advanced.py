"""
Genie Advanced module:

This module is used for advanced commands that are for expert users.
"""
import os
from datetime import datetime, timedelta

from time import sleep

from genie_python.genie_api_setup import __api, helparglist, usercommand, set_user_script_dir
from genie_python.utilities import check_break
from genie_python.genie_waitfor import DELAY_IN_WAIT_FOR_SLEEP_LOOP
from genie_python.genie_api_setup import log_command_and_handle_exception


@usercommand
@helparglist('block str')
@log_command_and_handle_exception
def get_pv_from_block(block):
    """
    Get the full PV name for a given block.
    This is an advanced function because of the need to use the pv name correctly.

    Args:
        block (str): A block object

    Returns:
        pv_name (Str): The pv name as a string

    """
    return __api.get_pv_from_block(block)


@usercommand
@helparglist('pv str, value[, maxwait]')
@log_command_and_handle_exception
def wait_for_pv(pv, value, maxwait=None):
    """
    Wait until a PV has reached a given value.

    Params:
        pv (str): The address of the PV
        value: The value to wait for
        maxwait (int, optional): The maximum time to wait for in seconds
    """
    start_time = datetime.utcnow()
    while True:
        curr_value = __api.get_pv_value(pv)
        if curr_value == value:
            break
        if maxwait is not None:
            if timedelta(seconds=maxwait) < datetime.utcnow() - start_time:
                break
        sleep(DELAY_IN_WAIT_FOR_SLEEP_LOOP)
        check_break(2)


@usercommand
@helparglist('')
def set_begin_precmd(begin_precmd):
    """
    Set the function to call before the begin command.

    Args:
        begin_precmd (function): The function to call (which should return None if it wants the run to start,
          or a string with the reason why not to start run).
    """
    __api.pre_post_cmd_manager.begin_precmd = begin_precmd


@usercommand
@helparglist('')
def set_begin_postcmd(begin_postcmd):
    """
    Set the function to call after the begin command.

    Args:
        begin_postcmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.begin_postcmd = begin_postcmd


@usercommand
@helparglist('')
def set_abort_precmd(abort_precmd):
    """
    Set the function to call before the abort command.

    Args:
        abort_precmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.abort_precmd = abort_precmd


@usercommand
@helparglist('')
def set_abort_postcmd(abort_postcmd):
    """
    Set the function to call after the abort command.

    Args:
        abort_postcmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.abort_postcmd = abort_postcmd


@usercommand
@helparglist('')
def set_end_precmd(end_precmd):
    """
    Set the function to call before the end command.

    Args:
        end_precmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.end_precmd = end_precmd


@usercommand
@helparglist('')
def set_end_postcmd(end_postcmd):
    """
    Set the function to call after the end command.

    Args:
        end_postcmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.end_postcmd = end_postcmd


@usercommand
@helparglist('')
def set_pause_precmd(pause_precmd):
    """
    Set the function to call before the pause command.

    Args:
        pause_precmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.pause_precmd = pause_precmd


@usercommand
@helparglist('')
def set_pause_postcmd(pause_postcmd):
    """
    Set the function to call after the pause command.

    Args:
        pause_postcmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.pause_postcmd = pause_postcmd


@usercommand
@helparglist('')
def set_resume_precmd(resume_precmd):
    """
    Set the function to call before the resume command.

    Args:
        resume_precmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.resume_precmd = resume_precmd


@usercommand
@helparglist('')
def set_resume_postcmd(resume_postcmd):
    """
    Set the function to call after the resume command.

    Args:
        resume_postcmd (function): The function to call.
    """
    __api.pre_post_cmd_manager.resume_postcmd = resume_postcmd


@usercommand
@helparglist('')
def open_plot_window(is_primary=True, host=None):
    """
    Open the plot window in the client
    Args:
        is_primary: True to open primary plotting window; False open secondaty window
        host: host to open plot from; Default None is localhost
    """
    from genie_python.matplotlib_backend.ibex_web_backend import ibex_open_plot_window
    ibex_open_plot_window(is_primary, host=host)


@usercommand
@helparglist('')
@log_command_and_handle_exception
def get_instrument():
    """
    Gets the name of the local instrument (e.g. NDW1234, DEMO, EMMA-A)

    Returns:
        the name of the local instrument
    """
    return __api.get_instrument()


@usercommand
@helparglist('verbose')
@log_command_and_handle_exception
def set_dae_message_verbosity(verbose):
    """
    Set the verbosity of messages coming from the DAE.

    Args:
        verbose (bool): set the verbosity, True to be more verbose
    """
    __api.dae.set_verbose(verbose)


@usercommand
@helparglist('')
@log_command_and_handle_exception
def get_exp_data(rb: int = None, user: str = None, role: str = None, verbose: bool = False):
    """
    Prints the data of experiments that match the given criteria, or all if none is given, from the exp_data database.

    Args:
        rb (int, optional): The RB number of the experiment to look for, Defaults to None (any).
        user (str, optional): The name of the user who is running/has run the experiment, Defaults to None (any).
        role (str, optional): The user role, Defaults to None (any).
        verbose (bool, optional): Pretty-print the data, Defaults to False.

    """
    try:
        return __api.exp_data.get_exp_data(rb, user, role, verbose)
    except AttributeError:
        raise NotImplementedError("get_exp_data is not implemented for this genie type")
