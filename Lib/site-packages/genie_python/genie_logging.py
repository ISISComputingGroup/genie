""" Logging module for genie """
import logging
import logging.config
import graypy
import os
from time import strftime, localtime
from genie_python.version import VERSION


class InstrumentFilter(logging.Filter):
    """ For Graylog fields (https://graypy.readthedocs.io/en/latest/readme.html#adding-custom-logging-fields) """
    def __init__(self, instrument_name, sim_mode):
        self.instrument = instrument_name
        self.sim_mode = sim_mode
        self.genie_version = VERSION
        self.reset()

    def filter(self, record):
        record.instrument = self.instrument
        record.command_called = self.command_called
        record.function_args = self.function_args
        record.function_kwargs = self.function_kwargs
        record.time_taken = self.time_taken
        record.exception_text = self.exception_text
        record.from_channel_access = str(self.from_channel_access)  # need to cast bool to str
        record.from_ibex = str(os.getenv("FROM_IBEX"))
        record.genie_version = self.genie_version
        record.is_sim_mode = str(self.sim_mode)
        self.reset()
        return True

    def reset(self):
        """
        Reset filter fields back to blank values.
        """
        self.command_called = ""
        self.function_args = ""
        self.function_kwargs = ""
        self.time_taken = 0
        self.exception_text = ""
        self.from_channel_access = False


class GenieLogger:
    def __init__(self, log_dir, inst_name, sim_mode=False):
        self.log_dir = log_dir
        self.sim_mode = sim_mode

        if not os.path.exists(self.log_dir):
            os.makedirs(self.log_dir)

        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    'format': '[{asctime}] [{process:d}:{thread:d}] [{levelname}]\t{message}',
                    'style': '{',
                    'datefmt': '%Y-%m-%dT%H:%M:%S'
                }
            },
            'handlers': {
                'graypy': {
                    'level': 'DEBUG',
                    'class': 'graypy.GELFUDPHandler',
                    'host': 'localhost',
                    'port': 12201,
                    'formatter': 'verbose',
                },
                'file': {
                    'level': 'DEBUG',
                    'formatter': 'verbose',
                    'class': 'logging.handlers.TimedRotatingFileHandler',
                    'filename': self._get_log_file_path(),
                    'when': 'midnight',
                    'interval': 1,
                    'delay': True,
                    'formatter': 'verbose',
                }
            },
            'loggers': {
                'genie_python_graylogger': {
                    'handlers': ['graypy', 'file'],
                    'level': 'DEBUG',
                    'propagate': False,
                    'namer': self._get_file_name()
                },
            },
        }
        logging.config.dictConfig(LOGGING)

        self.logger = logging.getLogger('genie_python_graylogger')

        self.filter = InstrumentFilter(inst_name, self.sim_mode)
        self.logger.addFilter(self.filter)

    def log_info_msg(self, message):
        self.logger.info(message)

    def log_command(self, function_name, arguments, time_taken=None):
        self.filter.command_called = function_name
        self.filter.function_args = arguments
        if time_taken is not None:
            self.filter.time_taken = time_taken
        self.logger.debug(f"{function_name} {arguments}")

    def log_error_msg(self, error_msg):
        """Log the error to the log file"""
        self.filter.exception_text = error_msg
        self.logger.error(error_msg)

    def log_ca_msg(self, error_msg):
        """Log the CA error (from CaChannel) to the log file"""
        self.filter.exception_text = error_msg
        self.logger.error(error_msg)

    def _get_log_file_path(self):
        filename = self._get_file_name()
        return os.path.join(self.log_dir, filename)

    def _get_file_name(self):
        curr_time = localtime()
        current_date_time = strftime("%Y-%m-%d-%a", curr_time)
        return f'genie-{"sim-" if self.sim_mode is True else ""}{current_date_time}.log'
