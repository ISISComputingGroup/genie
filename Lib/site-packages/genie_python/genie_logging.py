""" Logging module for genie """
import logging
import graypy
import os
from time import strftime, localtime
from genie_python.version import VERSION


class GenieLogger:
    def __init__(self, log_dir, inst_name, sim_mode=False):
        self.logger = logging.getLogger('genie_python_graylogger')
        self.logger.setLevel(logging.DEBUG)
        self.sim_mode = sim_mode

        web_handler = graypy.GELFUDPHandler('localhost', 12201)
        self.logger.addHandler(web_handler)

        if not os.path.exists(log_dir):
            os.makedirs(log_dir)

        curr_time = localtime()
        current_date_time = strftime("%Y-%m-%d-%a", curr_time)
        f_name = self._get_log_file_name(log_dir, current_date_time, self.sim_mode)

        # Delay opening the file until the first call to emit() in case file is not available (e.g. on VHD build)
        self.file_handler = logging.FileHandler(f_name, delay=True)
        self.logger.addHandler(self.file_handler)

        self.filter = self._get_filter(inst_name, self.sim_mode)
        self.logger.addFilter(self.filter)

    def log_info_msg(self, message):
        self.logger.info(self.gen_log_text("CMD", "INFO", message))

    def log_command(self, function_name, arguments, time_taken=None):
        self.filter.command_called = function_name
        self.filter.function_args = arguments
        if time_taken is not None:
            self.filter.time_taken = time_taken
        self.logger.debug(self.gen_log_text("CMD", "DEBUG", f"{function_name} {arguments}"))

    def log_error_msg(self, error_msg):
        """Log the error to the log file"""
        self.filter.exception_text = error_msg
        self.logger.error(self.gen_log_text("CMD", "ERROR", error_msg))

    def log_ca_msg(self, error_msg):
        """Log the CA error (from CaChannel) to the log file"""
        self.filter.exception_text = error_msg
        self.logger.error(self.gen_log_text("CA", "ERROR", error_msg))

    def gen_log_text(self, source, levelname, message):
        """
        Generates the correct format of log text, in the format
        "[date]T[time] ([source]) ([level]) ([PID]) [log message]"
        """

        curr_time = localtime()
        t_stamp = strftime("%Y-%m-%dT%H:%M:%S", curr_time)
        sim_mode_text = '(SIM MODE)\t'
        log_output = f"{t_stamp}\t({source})\t({levelname})\t({os.getpid()})\t" \
                     f"{sim_mode_text if self.sim_mode is True else ''}" \
                     f"{message}"
        return log_output

    @staticmethod
    def _get_filter(instrument_name, sim_mode):
        class InstrumentFilter(logging.Filter):
            def __init__(self):
                self.instrument = instrument_name
                self.sim_mode = sim_mode
                self.genie_version = VERSION
                self.reset()

            def filter(self, record):
                record.instrument = self.instrument
                record.command_called = self.command_called
                record.function_args = self.function_args
                record.function_kwargs = self.function_kwargs
                record.time_taken = self.time_taken
                record.exception_text = self.exception_text
                record.from_channel_access = str(self.from_channel_access)
                record.from_ibex = str(os.getenv("FROM_IBEX"))
                record.genie_version = self.genie_version
                record.is_sim_mode = self.sim_mode
                self.reset()
                return True

            def reset(self):
                """
                Reset filter fields back to blank values.
                """
                self.command_called = ""
                self.function_args = ""
                self.function_kwargs = ""
                self.time_taken = 0
                self.exception_text = ""
                self.from_channel_access = False
        return InstrumentFilter()

    @staticmethod
    def _get_log_file_name(log_dir, current_date_time, sim_mode):
        filename = f'genie-{"sim-" if sim_mode is True else ""}{current_date_time}.log'
        return os.path.join(log_dir, filename)
