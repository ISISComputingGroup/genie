"""
# This file is part of the ISIS IBEX application.
# Copyright (C) 2012-2016 Science & Technology Facilities Council.
# All rights reserved.
#
# This program is distributed in the hope that it will be useful.
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this distribution.
# EXCEPT AS EXPRESSLY SET FORTH IN THE ECLIPSE PUBLIC LICENSE V1.0, THE PROGRAM
# AND ACCOMPANYING MATERIALS ARE PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND.  See the Eclipse Public License v1.0 for more details.
#
# You should have received a copy of the Eclipse Public License v1.0
# along with this program; if not, you can obtain a copy from
# https://www.eclipse.org/org/documents/epl-v10.php or
# http://opensource.org/licenses/eclipse-1.0.php
"""
from __future__ import absolute_import

import json
import unittest
from time import sleep

from genie_python.block_names import BlockNames, BlockNamesManager
from genie_python.channel_access_exceptions import UnableToConnectToPVException
from genie_python.utilities import compress_and_hex

from hamcrest import assert_that, is_, only_contains, has_length
from mock import patch, Mock


def _activate_monitor(add_monitor_mock, expected_block_names):
    callback = add_monitor_mock.call_args[0][1]
    blockname_pv_return_value = compress_and_hex(json.dumps(expected_block_names))
    callback(blockname_pv_return_value, None, None)


def create_block_names(get_pv_value_mock, blocks, instrument_prefix="Prefix"):
    block_names = BlockNames()
    blocks_manager = BlockNamesManager(block_names, delay_before_retry_add_monitor=1)

    switch_prefix(get_pv_value_mock, blocks, blocks_manager, instrument_prefix)
    return block_names, blocks_manager


def switch_prefix(get_pv_value_mock, blocks, blocks_manager, instrument_prefix="Prefix"):
    get_pv_value_mock.return_value = compress_and_hex(json.dumps(blocks))
    blocks_manager.update_prefix(instrument_prefix)


@patch("genie_python.genie_cachannel_wrapper.CaChannelWrapper.get_pv_value")
@patch("genie_python.genie_cachannel_wrapper.CaChannelWrapper.add_monitor")
class TestGenieAutoCompletePyConsole(unittest.TestCase):

    def test_GIVEN_no_blocks_WHEN_inspect_block_names_THEN_class_is_empty(self, add_monitor_mock, get_pv_value_mock):
        block_names = BlockNames()

        assert_that(block_names.__dict__, is_({}))

    def test_GIVEN_no_blocks_WHEN_request_blockname_THEN_name_requested_returned(self, add_monitor_mock, get_pv_value_mock):
        block_names = BlockNames()

        result = block_names.unknown

        assert_that(result, is_("unknown"))

    def test_GIVEN_one_block_WHEN_inspect_block_THEN_class_has_attribute_was_is_block_name(self, add_monitor_mock, get_pv_value_mock):
        expected_block_name = "block_name"
        block_names, _ = create_block_names(get_pv_value_mock, [expected_block_name])

        result = block_names.block_name

        assert_that(result, is_(expected_block_name))

    def test_GIVEN_setup_WHEN_call_callback_THEN_block_names_updated(self, add_monitor_mock, get_pv_value_mock):
        expected_block_name = "block_name"
        block_names, _ = create_block_names(get_pv_value_mock, [])

        _activate_monitor(add_monitor_mock, [expected_block_name])
        result = block_names.block_name

        assert_that(result, is_(expected_block_name))

    def test_GIVEN_contains_blocks_WHEN_call_callback_THEN_old_block_names_deleted(self, add_monitor_mock, get_pv_value_mock):
        expected_block_name = "block_name"
        removed_block = "to_del"
        block_names, _ = create_block_names(get_pv_value_mock, [removed_block])

        _activate_monitor(add_monitor_mock, [expected_block_name])
        result = block_names.__dict__.keys()

        assert_that(result, only_contains(expected_block_name))

    def test_GIVEN_prefix_set_WHEN_set_prefix_THEN_previous_call_back_is_cleared(self, add_monitor_mock, get_pv_value_mock):
        call_back = Mock()
        add_monitor_mock.return_value = call_back

        block_names, blocks_name_manager = create_block_names(get_pv_value_mock, [])

        blocks_name_manager.update_prefix("new")

        call_back.assert_called_once()

    def test_GIVEN_pv_doesnt_exist_WHEN_setup_THEN_block_names_contains_no_blocks(self, add_monitor_mock, get_pv_value_mock):
        get_pv_value_mock.side_effect=UnableToConnectToPVException("block name", "errro")

        block_names, _ = create_block_names(get_pv_value_mock, ["hi"])

        result = block_names.__dict__

        assert_that(result, has_length(0))

    def test_GIVEN_pv_contains_nothing_WHEN_setup_THEN_block_names_contains_no_blocks(self, add_monitor_mock, get_pv_value_mock):

        block_names, block_names_manager = create_block_names(get_pv_value_mock, ["hi"])
        get_pv_value_mock.return_value = ""
        block_names_manager.update_prefix("")

        result = block_names.__dict__

        assert_that(result, has_length(0))

    def test_GIVEN_pv_contains_non_hex_WHEN_setup_THEN_block_names_contains_no_blocks(self, add_monitor_mock, get_pv_value_mock):

        block_names, block_names_manager = create_block_names(get_pv_value_mock, ["hi"])
        get_pv_value_mock.return_value = "not hex"
        block_names_manager.update_prefix("")

        result = block_names.__dict__

        assert_that(result, has_length(0))

    def test_GIVEN_pv_contains_non_json_WHEN_setup_THEN_block_names_contains_no_blocks(self, add_monitor_mock, get_pv_value_mock):

        block_names, block_names_manager = create_block_names(get_pv_value_mock, ["hi"])
        get_pv_value_mock.return_value = compress_and_hex(r"b\x\uxzlarg [  )")
        block_names_manager.update_prefix("")

        result = block_names.__dict__

        assert_that(result, has_length(0))

    def test_GIVEN_pv_doesnt_exist_on_add_monitor_WHEN_setup_THEN_add_monitor_is_retried_later(self, add_monitor_mock, get_pv_value_mock):
        add_monitor_mock.side_effect = [UnableToConnectToPVException("block name", "errro"), None]

        expected_block = "expected_block"
        block_names, _ = create_block_names(get_pv_value_mock, [expected_block])
        sleep(2)  # wait for retry

        result = block_names.__dict__

        assert_that(result, only_contains(expected_block))
