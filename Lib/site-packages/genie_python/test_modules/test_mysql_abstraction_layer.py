# This file is part of the ISIS IBEX application.
# Copyright (C) 2012-2023 Science & Technology Facilities Council.
# All rights reserved.
#
# This program is distributed in the hope that it will be useful.
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this distribution.
# EXCEPT AS EXPRESSLY SET FORTH IN THE ECLIPSE PUBLIC LICENSE V1.0, THE PROGRAM
# AND ACCOMPANYING MATERIALS ARE PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND.  See the Eclipse Public License v1.0 for more details.
#
# You should have received a copy of the Eclipse Public License v1.0
# along with this program; if not, you can obtain a copy from
# https://www.eclipse.org/org/documents/epl-v10.php or
# http://opensource.org/licenses/eclipse-1.0.php

import unittest
from hamcrest import *

from mock import Mock

from genie_python import mysql_abstraction_layer
from mysql.connector.errors import InternalError
from parameterized import parameterized

class SQLCursorStub(object):
    _opened = False
    _closed = False
    def __init__(self, throwError):
        SQLCursorStub._opened = True
        self._throwError = throwError

    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        x = self.a
        if x > 10:
            raise StopIteration
        self.a += 1
        return x

    def close(self):
        if self._throwError:
            raise InternalError("Unread result found")
        SQLCursorStub._closed = True

    def execute(self, command, bound_variables):
        pass

    def fetchall(self):
        pass
        

class SQLConnectorStub(object):
    _opened = False
    _closed = False

    def __init__(self, throwError):
        SQLConnectorStub._opened = True
        self._throwError = throwError

    def cursor(self):
        cursor = SQLCursorStub(self._throwError)
        return cursor

    def commit(self):
        pass

    def close(self):
        SQLConnectorStub._closed = True

class TestConnectionLayer(unittest.TestCase):
    def test_GIVEN_close_error_WHEN_execute_command_THEN_connection_is_closed(self):
        sql = mysql_abstraction_layer.SQLAbstraction(dbid='exp_data', user='report', password='$report')
        sql._get_connection = Mock(return_value=SQLConnectorStub(True))
        ExceptionRaised = False
        try:
            SEVERITY_NAMES_SQL = "SELECT severity_id, name FROM archive.severity"
            sql._execute_command(SEVERITY_NAMES_SQL, True, ())
        except InternalError:
            ExceptionRaised = True
        finally:
            assert_that(ExceptionRaised, equal_to(True))
            assert_that(SQLConnectorStub._opened, equal_to(True))
            assert_that(SQLConnectorStub._closed, equal_to(True))

    def test_GIVEN_no_close_error_WHEN_execute_command_THEN_connection_is_closed(self):
        sql = mysql_abstraction_layer.SQLAbstraction(dbid='exp_data', user='report', password='$report')
        sql._get_connection = Mock(return_value=SQLConnectorStub(False))
        ExceptionRaised = False
        try:
            SEVERITY_NAMES_SQL = "SELECT severity_id, name FROM archive.severity"
            sql._execute_command(SEVERITY_NAMES_SQL, True, ())
        except InternalError:
            ExceptionRaised = True
        finally:
            assert_that(ExceptionRaised, equal_to(False))
            assert_that(SQLConnectorStub._opened, equal_to(True))
            assert_that(SQLConnectorStub._closed, equal_to(True))

    def test_GIVEN_close_error_WHEN_execute_command_THEN_connection_is_closed(self):
        sql = mysql_abstraction_layer.SQLAbstraction(dbid='exp_data', user='report', password='$report')
        sql._get_connection = Mock(return_value=SQLConnectorStub(True))
        ExceptionRaised = False
        try:
            SEVERITY_NAMES_SQL = "SELECT severity_id, name FROM archive.severity"
            [x for x in sql.query_returning_cursor(SEVERITY_NAMES_SQL, ())]
        except InternalError:
            ExceptionRaised = True
        finally:
            assert_that(ExceptionRaised, equal_to(True))
            assert_that(SQLConnectorStub._opened, equal_to(True))
            assert_that(SQLConnectorStub._closed, equal_to(True))

    def test_GIVEN_no_close_error_WHEN_execute_command_THEN_connection_is_closed(self):
        sql = mysql_abstraction_layer.SQLAbstraction(dbid='exp_data', user='report', password='$report')
        sql._get_connection = Mock(return_value=SQLConnectorStub(False))
        ExceptionRaised = False
        try:
            SEVERITY_NAMES_SQL = "SELECT severity_id, name FROM archive.severity"
            [x for x in sql.query_returning_cursor(SEVERITY_NAMES_SQL, ())]
        except InternalError:
            ExceptionRaised = True
        finally:
            assert_that(ExceptionRaised, equal_to(False))
            assert_that(SQLConnectorStub._opened, equal_to(True))
            assert_that(SQLConnectorStub._closed, equal_to(True))

