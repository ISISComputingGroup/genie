# This file is part of the ISIS IBEX application.
# Copyright (C) 2012-2023 Science & Technology Facilities Council.
# All rights reserved.
#
# This program is distributed in the hope that it will be useful.
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this distribution.
# EXCEPT AS EXPRESSLY SET FORTH IN THE ECLIPSE PUBLIC LICENSE V1.0, THE PROGRAM
# AND ACCOMPANYING MATERIALS ARE PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND.  See the Eclipse Public License v1.0 for more details.
#
# You should have received a copy of the Eclipse Public License v1.0
# along with this program; if not, you can obtain a copy from
# https://www.eclipse.org/org/documents/epl-v10.php or
# http://opensource.org/licenses/eclipse-1.0.php

import unittest
from hamcrest import *

from mock import Mock

from genie_python import mysql_abstraction_layer
from mysql.connector.errors import InternalError


class SQLCursorStub(object):
    _opened = False
    _closed = False
    def __init__(self):
        SQLCursorStub._opened = True
        print("Cursor opening")
        
    def close():
        print("Cursor closing")
        raise InternalError("Unread result found")
        SQLCursorStub._closed = True

    def execute(command, bound_variables):
        pass

    def fetchall():
        pass
        

class SQLConnectorStub(object):
    _opened = False
    _closed = False

    def __init__(self):
        print("Connection opening")
        SQLConnectorStub._opened = True
        
    def cursor():
        print("Creating cursor")
        cursor = SQLCursorStub
        return cursor

    def commit():
        print("Comitting")
    
    def close():
        print("Connection closing")
        SQLConnectorStub._closed = True


class TestConnectionLayer(unittest.TestCase):

    def test_GIVEN_close_error_WHEN_query_returning_cursor_THEN_connection_is_closed(self):
        sql = mysql_abstraction_layer.SQLAbstraction(dbid='exp_data', user='report', password='$report')
        sql._get_connection = Mock(return_value=SQLConnectorStub)
        print(mysql_abstraction_layer.__file__)
        try:
            SEVERITY_NAMES_SQL = "SELECT severity_id, name FROM archive.severity"
            sql._execute_command(SEVERITY_NAMES_SQL, True, ())
            print("here")
            #sql.query_returning_cursor(SEVERITY_NAMES_SQL, ())
            print("here2")
        except Exception as e:
            print("Exception ", e)
        finally:
            assert_that(SQLConnectorStub._closed, equal_to(True))
