# This file is part of the ISIS IBEX application.
# Copyright (C) 2012-2016 Science & Technology Facilities Council.
# All rights reserved.
#
# This program is distributed in the hope that it will be useful.
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this distribution.
# EXCEPT AS EXPRESSLY SET FORTH IN THE ECLIPSE PUBLIC LICENSE V1.0, THE PROGRAM
# AND ACCOMPANYING MATERIALS ARE PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND.  See the Eclipse Public License v1.0 for more details.
#
# You should have received a copy of the Eclipse Public License v1.0
# along with this program; if not, you can obtain a copy from
# https://www.eclipse.org/org/documents/epl-v10.php or
# http://opensource.org/licenses/eclipse-1.0.php
from __future__ import absolute_import
import os
import sys
import unittest

from genie_script_checker import ScriptChecker
from genie_epics_api import API

dir_path = os.path.dirname(os.path.realpath(__file__))
file_path = os.path.join(dir_path, "valid_script_checker.py")

def write_to_file(message):

    open(file_path, "w+").close()
    with file(file_path, "w") as f:
            for line in message:
                print("MESSAGES")
                print(line)
                f.write(line)

class TestScriptChecker(unittest.TestCase):
    def setUp(self):
        self.checker = ScriptChecker()
        self.api = API("", None)
        self.instrument, self.machine, self.pv_prefix = self.api._get_machine_details_from_identifier(None)
        file_path = os.path.join("C:\\", "Instrument", "Settings", "config", self.machine, "Python")
        sys.path.append(file_path)

    def tearDown(self):
        pass

    def test_GIVEN_end_without_brakets_WHEN_check_THEN_error_message(self):
        script_lines = [
            "from genie_python import genie as g\n"
            "import inst\n"
            "def test():\n",
            "  g.begin()\n",
            "  g.end\n"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, True)

        self.assertEquals(result, ["W:  5: Statement seems to have no effect (pointless-statement)"])

    def test_GIVEN_end_as_start_of_another_word_WHEN_check_THEN_no_error_message(self):

        script_lines = [
            "from genie_python import genie as g\n"
            "import inst\n"
            "def test():\n",
            "    endAngle = 1"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine)

        self.assertEquals(result, [])

    def test_GIVEN_end_as_end_of_another_word_WHEN_check_THEN_no_error_message(self):

        script_lines = [
            "from genie_python import genie as g\n"
            "import inst\n"
            "def test():\n",
            "    angle_end = 1"]
        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine)

        self.assertEquals(result, [])

    def test_GIVEN_end_without_brakets_at_start_of_line_WHEN_check_THEN_error_message(self):
        script_lines = [
            "from genie_python import genie as g\n"
            "import inst\n"
            "def test():\n"
            "   g.end"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine,warnings_as_error=True)

        self.assertEquals(result, ["W:  4: Statement seems to have no effect (pointless-statement)"])

    def test_GIVEN_end_without_brackets_on_line_with_fn_with_brackets_WHEN_check_THEN_error_message(self):
        script_lines = [
            "from genie_python import genie as g\n"
            "import inst\n"
            "g.begin(); g.end "]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, warnings_as_error = True)

        self.assertEquals(result, ["W:  3: Statement seems to have no effect (pointless-statement)"])


    def test_GIVEN_end_in_string_without_brakets_WHEN_check_THEN_no_message(self):
        script_lines = ["def test():\n"
            "   \" a string containing end \""]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine)

        self.assertEquals(result, [])

    def test_GIVEN_end_between_strings_without_brakets_WHEN_check_THEN_no_error_message(self):
        script_lines = ["from genie_python import genie as g\n"
            "def test():\n"
            "   \" a string containing end \" + g.end + \" string in end\""]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine)

        self.assertEquals(result, [])

    def test_GIVEN_end_in_comment_without_brakets_WHEN_check_THEN_no_message(self):
        script_lines = ["def test():\n",
            "   \"stuff\" # end \""]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine)

        self.assertEquals(result, [])

    def test_GIVEN_g_assignment_WHEN_check_THEN_warning_message(self):
        script_lines = ["from genie_python import genie as g", "g=1"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  2: 'g' assignment in line 2"])

    def test_GIVEN_g_assignment_after_whitespace_WHEN_check_THEN_warning_message(self):
        script_lines = ["g=2"]
        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'g' assignment in line 1"])

    def test_GIVEN_g_assignment_with_space_before_number_WHEN_check_THEN_warning_message(self):
        script_lines = ["g<= 3"]
        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, [])

    def test_GIVEN_inst_assignment_with_point_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst.test=>4"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_inst_assignment_with_space_between_assignment_and_value_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst = 5"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_inst_assignment_with_2_symbols_before_number_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst+=6"]
        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_inst_assignment_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst=7"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_inst_assignment_after_whitespace_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst=8"]

        result = self.checker.check_script_lines(script_lines)
        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_inst_assignment_with_space_before_number_WHEN_check_THEN_warning_message(self):
        script_lines = ["inst= 9"]
        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'inst' assignment in line 1"])

    def test_GIVEN_g_assignment_with_point_WHEN_check_THEN_warning_message(self):
        script_lines = ["g.cset=10"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'g' assignment in line 1"])

    def test_GIVEN_g_assignment_with_space_between_assignment_and_value_WHEN_check_THEN_warning_message(self):
        script_lines = ["g = 11"]

        result = self.checker.check_script_lines(script_lines)

        self.assertEquals(result, ["W:  1: 'g' assignment in line 1"])

    def test_GIVEN_g_assignment_with_2_symbols_before_number_WHEN_check_THEN_warning_message(self):
        script_lines = ["from genie_python import genie as g\n"
                        "def test():\n"
                        "   g+=12"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, True)

        self.assertEquals(result, ["E:  3: Undefined variable 'g' (undefined-variable)", "W:  3: 'g' assignment in line 3"])

    def test_GIVEN_variable_assignment_with_g__WHEN_check_THEN_no_message(self):
        script_lines = ["going=13"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, True)
        self.assertEquals(result, [])

    def test_GIVEN_function_with_g_WHEN_check_THEN_warn_user(self):
        script_lines = ["from genie_python import genie as g\n"
                        "def test():\n"
                        "   g.test_function()\n"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path,self.machine, True)

        self.assertEquals(result, ["E:  3: Module 'genie_python.genie' has no 'test_function' member (no-member)"])

    def test_GIVEN_2_g_assignments_WHEN_check_THEN_warning_message(self):
        script_lines = ["from genie_python import genie as g\n"
                        "def test():\n"
                        "   g=16\n",
                        "   g=17"]

        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, True)

        self.assertEquals(result, ["W:  3: 'g' assignment in line 3", "W:  4: 'g' assignment in line 4"])

    def test_GIVEN_g_non_exsisting_command_WHEN_call_THEN_error_message(self):
        script_lines = [ "from genie_python import genie as g\n"
                        "def test():\n"
                         "  g.aitfor_time(10)" ]
        write_to_file(script_lines)
        result = self.checker.check_script(file_path, self.machine, True)

        self.assertEquals(result, ["E:  3: Module 'genie_python.genie' has no 'aitfor_time' member; maybe 'waitfor_time'? (no-member)"])