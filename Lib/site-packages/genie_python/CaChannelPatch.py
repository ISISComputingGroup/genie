"""
This is used to Monkey patch CaChannel in genie_cachannel_wrapper.py
"""
from __future__ import print_function, absolute_import
import traceback

import CaChannel
import ca

def replace_printf_handler(self, callback=None, user_args=None):
    """
    Install or replace the callback used for formatted CA diagnostic message output.
    The default is to send to stderr.

    :param callable callback: function called.
    :param user_args: user provided arguments that are passed to callback when it is invoked.

    >>> chan = CaChannel('catest')
    >>> chan.searchw()
    >>> def printfCB(message, _):
    ...     print('CA message:', message)
    >>> chan.replace_printf_handler(printfCB)  # add callback
    >>> chan.replace_printf_handler() # clear the callback

    """
    if callable(callback):
        self._callbacks['printfCB'] = (callback, user_args)
        ca.replace_printf_handler(self._printf_callback)
    else:
        self._callbacks['printfCB'] = None
        ca.replace_printf_handler(None)

def add_exception_event(self, callback=None, user_args=None):
    """
    Install or replace the currently installed CA context global exception handler callback.

    When an error occurs in the server asynchronous to the clients thread then information
    about this type of error is passed from the server to the client in an exception message.
    When the client receives this exception message an exception handler callback is called.
    The default exception handler prints a diagnostic message on the client's standard out and
    terminates execution if the error condition is severe.

    Note that certain fields returned in thecallback args are not applicable in the context of
    some error messages. For instance, a failed get will supply the address in the client task
    where the returned value was requested to be written. For other failed operations the value
    of the addr field should not be used.

    :param callable callback: function called.
    :param user_args: user provided arguments that are passed to callback when it is invoked.

    The possible fields available are as defined in the C "struct exception_handler_args"
    and are: chid, type, count, state, op, ctx, file, lineNo

    >>> chan = CaChannel('catest')
    >>> chan.searchw()
    >>> def exceptionCB(epicsArgs, _):
    ...     print('op:', epicsArgs['op'], 'file:', epicsArgs['file'], 'line:', epicsArgs['lineNo'])
    >>> chan.add_exception_event(exceptionCB) # add callback
    >>> chan.add_exception_event() # clear the callback

    """
    if callable(callback):
        self._callbacks['exceptionCB'] = (callback, user_args)
        ca.add_exception_event(self._exception_callback)
    else:
        self._callbacks['exceptionCB'] = None
        ca.add_exception_event(None)


#
# Callback functions
#
# These functions hook user supplied callback functions to CA extension


def _printf_callback(self, message):
    callback = self._callbacks.get('printfCB')
    if callback is None:
        return
    callbackFunc, userArgs = callback
    try:
        callbackFunc(message, userArgs)
    except:
        traceback.print_exc()

def _exception_callback(self, epicsArgs):
    callback = self._callbacks.get('exceptionCB')
    if callback is None:
        return
    callbackFunc, userArgs = callback
    try:
        callbackFunc(epicsArgs, userArgs)
    except:
        traceback.print_exc()

